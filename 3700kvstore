#!/usr/bin/env python

import sys
import socket
import select
import time
import json
import random

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

current_term = 1                          # the current term
voted_for = ''                            # who I voted for this election
log = {}                                  # my log of commands for state machine
database = {}                             # the state machine
commit_index = 0                          # index of highest log entry known to be committed
last_applied = 0                          # index of highest log entry applied to state machine
next_index = {}                           # for leader; next index to send to each follower
match_index = {}                          # for leader; index of highest log entry known to be replicated there

status = 'follower'                       # current status
leaderID = 'FFFF'                         # ID of known leader
last_received_from_leader = time.time()   # the time when I last received a message from the leader
last_sent_to_followers = {}               # the times when I last sent a message to my followers
votes_granted = {}                        # candidates use; who voted/didn't vote for me
last_log_index = 0                        # index of my last log entry
last_log_term = 0                         # term of my last log entry
num_servers = len(replica_ids) + 1        # number of servers (including me)
leader_responses = {}
sources = {}

num_messages = {}
ok_sent = []


# send message to sock
def sock_send(message):
  global next_index
  global log

  if status == 'leader':
    if message['dst'] in replica_ids:
      last_sent_to_followers[message['dst']] = time.time()

  sock.send(json.dumps(message))


# initiate leader election
def initiate_election():
  global current_term
  global leaderID
  global status
  global voted_for
  global votes_granted
  global last_received_from_leader

  # increment term, change leader id to unknown, i am now a candidate, vote for myself, send to other servers
  current_term += 1
  leaderID = 'FFFF'
  status = 'candidate'
  voted_for = my_id
  votes_granted[my_id] = True
  last_received_from_leader = time.time()
  for rid in replica_ids:
    vote_msg = {'src': my_id, 'dst': rid, 'leader': leaderID, 'type': 'RequestVote',
                'term': current_term, 'last_log_index': last_log_index, 'last_log_term': last_log_term}
    sock_send(vote_msg)


# get the number of votes granted to me in election
def get_num_votes():
  global votes_granted

  num_votes = 0

  for x in votes_granted:
    if votes_granted[x] is True:
      num_votes += 1

  return num_votes


# set my election timeout to random number between .1 and .2 seconds
election_timeout = random.randrange(100, 200) / float(1000)

# main while loop
while True:
  ready = select.select([sock], [], [], 0)[0]

  # received a message
  if sock in ready:
    msg_raw = sock.recv(32768)

    if len(msg_raw) == 0:
      continue

    msg = json.loads(msg_raw)

    # message is from leader
    if msg['src'] == leaderID:
      last_received_from_leader = time.time()

    # For now, ignore get() and put() from clients
    if msg['type'] in ['get', 'put']:
      if status != 'leader':
        redir_msg = {'src': my_id, 'dst': msg['src'], 'leader': leaderID,
                     'type': 'redirect', 'MID': msg['MID']}
        sock_send(redir_msg)
      else:
        #print len(database), len(log)
        if msg['type'] == 'put':
          last_log_index += 1
          sources[msg['MID']] = msg['src']
          msg['put_src'] = msg['src']
          msg['src'] = my_id
          msg['last_log_index'] = last_log_index - 1
          msg['term'] = current_term
          msg['success'] = [my_id]
          msg['committed'] = False
          msg['last_term'] = last_log_term
          msg['index'] = last_log_index
          log[last_log_index] = msg
          last_log_term = current_term
        else:
          try:
            ok_msg = {"src": my_id, "dst": msg['src'], "leader": leaderID,
                      "type": "ok", "MID": msg['MID'], "value": database[msg['key']]}
            sock_send(ok_msg)
          except KeyError:
            redir_msg = {'src': my_id, 'dst': msg['src'], 'leader': leaderID,
                         'type': 'redirect', 'MID': msg['MID']}
            sock_send(redir_msg)

    # someone requested a vote
    elif msg['type'] == 'RequestVote':
      new_msg = {}

      # this is from a previous term; decline
      if msg['term'] < current_term:
        new_msg = {'src': my_id, 'dst': msg['src'], 'leader': leaderID, 'type': 'ResponseVote',
                   'voteGranted': False, 'term': current_term}

      # either this is for a higher term, or for this term and i already voted for this server
      elif (msg['term'] > current_term or (voted_for == msg['src'] and msg['term'] == current_term)) and msg['last_log_index'] >= last_log_index:
        current_term = msg['term']
        voted_for = msg['src']
        leaderID = 'FFFF'
        if status == 'leader':
          election_timeout = random.randrange(100, 200) / float(1000)
        last_received_from_leader = time.time()
        status = 'follower'
        new_msg = {'src': my_id, 'dst': msg['src'], 'leader': leaderID, 'type': 'ResponseVote',
                   'voteGranted': True, 'term': current_term}

      # new term, but the log wasn't updated enough
      elif msg['term'] > current_term:
        current_term = msg['term']
        voted_for = ''
        leaderID = 'FFFF'
        if status == 'leader':
          last_received_from_leader = time.time()
          election_timeout = random.randrange(100, 200) / float(1000)
        status = 'follower'
        new_msg = {'src': my_id, 'dst': msg['src'], 'leader': leaderID, 'type': 'ResponseVote',
                   'voteGranted': False, 'term': current_term}

      else:
        new_msg = {'src': my_id, 'dst': msg['src'], 'leader': leaderID, 'type': 'ResponseVote',
                   'voteGranted': False, 'term': current_term}

      sock_send(new_msg)

    # candidate use; someone responded to my vote request
    elif msg['type'] == 'ResponseVote':
      votes_granted[msg['src']] = msg['voteGranted']

      # i have a quorum of votes - i am leader!
      if get_num_votes() >= (num_servers / 2) + 1 and status == 'candidate':
        election_timeout = None
        status = 'leader'
        leaderID = my_id
        for rid in replica_ids:
          next_index[rid] = last_log_index + 1
          match_index[rid] = 0
          append_msg = {'src': my_id, 'dst': rid, 'leader': leaderID, 'type': 'AppendEntries',
                        'term': current_term, 'entries': [], 'commit_index': commit_index}
          last_sent_to_followers[rid] = time.time()
          sock_send(append_msg)

    elif msg['type'] == 'AppendEntries':
      # i must have missed an election -> update
      if msg['term'] > current_term:
        votes_granted = {}
        voted_for = ''
        leaderID = msg['leader']
        status = 'follower'
        current_term = msg['term']

      # this is the correct term
      elif msg['term'] == current_term:
        # this is from a new leader, reset election timeout
        if leaderID == 'FFFF':
          election_timeout = random.randrange(100, 200) / float(1000)
        # reset the following values
          last_received_from_leader = time.time()
          votes_granted = {}
          leaderID = msg['leader']
          status = 'follower'
          current_term = msg['term']

        # catch up on commits
        lead_commit = msg['commit_index']
        if lead_commit > commit_index:
          #print my_id, last_applied, commit_index, lead_commit, len(log)
          last_applied = commit_index
          commit_index = min(lead_commit, len(log))
          for idx in range(last_applied + 1, commit_index + 1):
            database[log[idx]['key']] = log[idx]['value']

        # there is an entry
        if len(msg['entries']) == 1:
          entry = msg['entries'][0]
          # first message, add to log
          if last_log_index == 0 or entry['last_log_index'] == 0:
            log[entry['index']] = entry
            last_log_index = entry['index']
            last_log_term = current_term
            new_msg = {'src': my_id, 'dst': leaderID, 'type': 'AppendResponse', 'leader': leaderID,
                       'term': current_term, 'success': True, 'match_index': commit_index,
                       'last_log_index': last_log_index, 'index': entry['index']}
            sock_send(new_msg)
            continue

          last_msg = {}
          try:
            last_msg = log[entry['last_log_index']]

          # i don't have the previous log entry, tell leader where i'm at in the log
          except KeyError:
            new_msg = {'src': my_id, 'dst': leaderID, 'type': 'AppendResponse', 'leader': leaderID,
                       'term': current_term, 'success': False, 'match_index': commit_index}
            sock_send(new_msg)
            continue

          # i have the previous log entry but for the wrong term, tell leader where i'm at
          if last_msg['term'] != entry['last_term']:
            new_msg = {'src': my_id, 'dst': leaderID, 'type': 'AppendResponse', 'leader': leaderID,
                       'term': current_term, 'success': False, 'match_index': commit_index,
                       'last_log_index': last_log_index}
            sock_send(new_msg)
            continue
          other_msg = {}

          # i already have an entry for the new message
          try:
            other_msg = log[entry['index']]

            # old entry is bad, delete and all that follow it
            if other_msg['MID'] != entry['MID']:
              ind = entry['index']
              try:
                while log[ind]:
                  del log[ind]
                  ind += 1
              except KeyError:
                pass
          except KeyError:
            pass

          # i am free to add to the log, whether there never was a duplicate or i deleted it
          log[entry['index']] = entry
          last_log_index = entry['index']
          last_log_term = current_term
          new_msg = {'src': my_id, 'dst': leaderID, 'type': 'AppendResponse', 'leader': leaderID,
                     'term': current_term, 'success': True, 'match_index': commit_index,
                     'last_log_index': last_log_index, 'index': entry['index']}
          sock_send(new_msg)

    elif msg['type'] == 'AppendResponse':
      if msg['term'] == current_term:
        if msg['success']:
          rid = msg['src']
          if next_index[rid] == msg['index']:
            next_index[rid] += 1
          if rid not in log[msg['index']]['success']:
            log[msg['index']]['success'].append(rid)
          if len(log[msg['index']]['success']) >= (num_servers / 2) + 1 and not log[msg['index']]['committed']:
            # commit message
            log[msg['index']]['committed'] = True
            commit_index += 1
            database[log[msg['index']]['key']] = log[msg['index']]['value']
            mid = log[msg['index']]['MID']
            ok_msg = {'src': my_id, 'dst': log[msg['index']]['put_src'], 'type': 'ok',
                      'leader': leaderID, 'MID': mid}
            sock_send(ok_msg)
        # append failure, correct follower
        else:
          rid = msg['src']
          try:
            if next_index[rid] != 1:
              next_index[rid] -= 1
          except KeyError:
            next_index[rid] = last_log_index
          #print next_index[rid]
          #print log
          append_msg = {'src': my_id, 'dst': rid, 'leader': leaderID, 'type': 'AppendEntries',
                        'term': log[next_index[rid]]['term'],
                        'entries': [log[next_index[rid]]], 'commit_index': commit_index}
          sock_send(append_msg)

  # it's been too long since i've heard from the leader; initiate election
  if status != 'leader' and time.time() - last_received_from_leader >= election_timeout:
    initiate_election()

  # time to send a heartbeat message to my followers
  if status == 'leader':
    for rid in replica_ids:
      if time.time() - last_sent_to_followers[rid] >= .05:
        # send heartbeat
        if len(log) >= next_index[rid]:
          append_msg = {'src': my_id, 'dst': rid, 'leader': leaderID, 'type': 'AppendEntries',
                        'term': current_term, 'entries': [log[next_index[rid]]],
                        'commit_index': commit_index}
        else:
          append_msg = {'src': my_id, 'dst': rid, 'leader': leaderID, 'type': 'AppendEntries',
                        'term': current_term, 'entries': [], 'commit_index': commit_index}
        sock_send(append_msg)
